//.title
// ▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓
//
// GENERATED BY DF GEN - DO NOT MODIFY BY HAND
// See: https://github.com/robmllze/df_gen
//
// ▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓
//.title~

// ignore_for_file: annotate_overrides
// ignore_for_file: invalid_null_aware_operator
// ignore_for_file: overridden_fields
// ignore_for_file: unnecessary_non_null_assertion
// ignore_for_file: unnecessary_null_comparison
// ignore_for_file: unnecessary_question_mark
// ignore_for_file: unnecessary_this

part of 'generate_dart_model.dart';

// ░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░

class GenerateDartModel extends _GenerateDartModel {
  //
  //
  //

  static const CLASS_NAME = 'GenerateDartModel';

  @override
  String get $className => CLASS_NAME;

  final String? className;
  final Set<dynamic>? fields;
  final bool? shouldInherit;
  final String? inheritanceConstructor;
  final String? keyStringCase;

  //
  //
  //

  const GenerateDartModel({
    this.className,
    this.fields,
    this.shouldInherit,
    this.inheritanceConstructor,
    this.keyStringCase,
  });

  const GenerateDartModel.c2({
    this.className,
    this.fields,
    this.shouldInherit,
    this.inheritanceConstructor,
    this.keyStringCase,
  });

  factory GenerateDartModel.c3({
    String? className,
    Set<dynamic>? fields,
    bool? shouldInherit,
    String? inheritanceConstructor,
    String? keyStringCase,
  }) {
    return GenerateDartModel(
      className: className,
      fields: fields,
      shouldInherit: shouldInherit,
      inheritanceConstructor: inheritanceConstructor,
      keyStringCase: keyStringCase,
    );
  }

  factory GenerateDartModel.from(
    BaseModel? other,
  ) {
    try {
      return fromOrNull(other)!;
    } catch (e) {
      assert(false, 'GenerateDartModel.from: $e');
      rethrow;
    }
  }

  static GenerateDartModel? fromOrNull(
    BaseModel? other,
  ) {
    return fromJsonOrNull(other?.toJson())!;
  }

  factory GenerateDartModel.of(
    GenerateDartModel other,
  ) {
    try {
      return ofOrNull(other)!;
    } catch (e) {
      assert(false, 'GenerateDartModel.of: $e');
      rethrow;
    }
  }

  static GenerateDartModel? ofOrNull(
    GenerateDartModel? other,
  ) {
    return fromJsonOrNull(other?.toJson());
  }

  factory GenerateDartModel.fromJsonString(
    String source,
  ) {
    try {
      return fromJsonStringOrNull(source)!;
    } catch (e) {
      assert(false, 'GenerateDartModel.fromJsonString: $e');
      rethrow;
    }
  }

  static GenerateDartModel? fromJsonStringOrNull(
    String? source,
  ) {
    try {
      if (source!.isNotEmpty) {
        final decoded = letMapOrNull<String, dynamic>(jsonDecode(source));
        return GenerateDartModel.fromJson(decoded);
      } else {
        return const GenerateDartModel.c2();
      }
    } catch (_) {
      return null;
    }
  }

  factory GenerateDartModel.fromJson(
    Map<String, dynamic>? otherData,
  ) {
    try {
      return fromJsonOrNull(otherData)!;
    } catch (e) {
      assert(false, 'GenerateDartModel.fromJson: $e');
      rethrow;
    }
  }

  static GenerateDartModel? fromJsonOrNull(
    Map<String, dynamic>? otherData,
  ) {
    try {
      final className = otherData?['className']?.toString().trim().nullIfEmpty;
      final fields = letSetOrNull<dynamic>(otherData?['fields'])
          ?.map(
            (p0) => p0,
          )
          .nonNulls
          .nullIfEmpty
          ?.toSet();
      final shouldInherit = letBoolOrNull(otherData?['shouldInherit']);
      final inheritanceConstructor =
          otherData?['inheritanceConstructor']?.toString().trim().nullIfEmpty;
      final keyStringCase =
          otherData?['keyStringCase']?.toString().trim().nullIfEmpty;
      return GenerateDartModel(
        className: className,
        fields: fields,
        shouldInherit: shouldInherit,
        inheritanceConstructor: inheritanceConstructor,
        keyStringCase: keyStringCase,
      );
    } catch (e) {
      return null;
    }
  }

  factory GenerateDartModel.fromUri(
    Uri? uri,
  ) {
    try {
      return fromUriOrNull(uri)!;
    } catch (e) {
      assert(false, 'GenerateDartModel.fromUri: $e');
      rethrow;
    }
  }

  static GenerateDartModel? fromUriOrNull(
    Uri? uri,
  ) {
    try {
      if (uri != null && uri.path == CLASS_NAME) {
        return GenerateDartModel.fromJson(uri.queryParameters);
      } else {
        return const GenerateDartModel.c2();
      }
    } catch (_) {
      return null;
    }
  }

  //
  //
  //

  @override
  Map<String, dynamic> toJson({
    bool includeNulls = false,
  }) {
    try {
      final className0 = this.className?.trim().nullIfEmpty;
      final fields0 = this
          .fields
          ?.map(
            (p0) => p0,
          )
          .nonNulls
          .nullIfEmpty
          ?.toList();
      final shouldInherit0 = this.shouldInherit;
      final inheritanceConstructor0 =
          this.inheritanceConstructor?.trim().nullIfEmpty;
      final keyStringCase0 = this.keyStringCase?.trim().nullIfEmpty;
      final withNulls = {
        'shouldInherit': shouldInherit0,
        'keyStringCase': keyStringCase0,
        'inheritanceConstructor': inheritanceConstructor0,
        'fields': fields0,
        'className': className0,
      };
      return includeNulls ? withNulls : withNulls.nonNulls;
    } catch (e) {
      assert(false, 'GenerateDartModel.toJson: $e');
      rethrow;
    }
  }

  //
  //
  //

  @override
  GenerateDartModel mergeWith(
    BaseModel? other, {
    bool deepMerge = false,
  }) {
    final a = toJson();
    final b = other?.toJson() ?? {};
    final data = (deepMerge ? mergeDataDeep(a, b) : {...a, ...b}) as Map;
    return GenerateDartModel.fromJson(data.cast());
  }

  //
  //
  //

  // className.
  String? get classNameField => this.className;

  // fields.
  Set<dynamic>? get fieldsField => this.fields;

  // shouldInherit.
  bool? get shouldInheritField => this.shouldInherit;

  // inheritanceConstructor.
  String? get inheritanceConstructorField => this.inheritanceConstructor;

  // keyStringCase.
  String? get keyStringCaseField => this.keyStringCase;
}

// ░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░

final class GenerateDartModelFieldNames {
  //
  //
  //

  static const className = 'className';
  static const fields = 'fields';
  static const shouldInherit = 'shouldInherit';
  static const inheritanceConstructor = 'inheritanceConstructor';
  static const keyStringCase = 'keyStringCase';

  //
  //
  //

  const GenerateDartModelFieldNames._();
}
