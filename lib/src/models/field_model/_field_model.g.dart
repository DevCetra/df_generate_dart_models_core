//.title
// ▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓
//
// GENERATED BY DF GEN - DO NOT MODIFY BY HAND
// See: https://github.com/robmllze/df_gen
//
// ▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓
//.title~

// ignore_for_file: annotate_overrides
// ignore_for_file: invalid_null_aware_operator
// ignore_for_file: overridden_fields
// ignore_for_file: require_trailing_commas
// ignore_for_file: unnecessary_non_null_assertion
// ignore_for_file: unnecessary_null_comparison
// ignore_for_file: unnecessary_question_mark
// ignore_for_file: unnecessary_this

part of 'field_model.dart';

// ░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░

class FieldModel extends _FieldModel {
  //
  //
  //

  static const CLASS_NAME = 'FieldModel';

  @override
  String get $className => CLASS_NAME;

  final List<String>? fieldPath;
  final dynamic? fieldType;
  final bool? primary;
  final Object? fallback;
  final bool? nullable;
  final List<FieldModel>? children;
  final String? description;

  //
  //
  //

  const FieldModel({
    this.fieldPath,
    required this.fieldType,
    this.primary,
    this.fallback,
    this.nullable,
    this.children,
    this.description,
  });

  const FieldModel.c2({
    this.fieldPath,
    this.fieldType,
    this.primary,
    this.fallback,
    this.nullable,
    this.children,
    this.description,
  });

  factory FieldModel.c3({
    List<String>? fieldPath,
    dynamic? fieldType,
    bool? primary,
    Object? fallback,
    bool? nullable,
    List<FieldModel>? children,
    String? description,
  }) {
    assert(fieldType != null);

    return FieldModel(
      fieldPath: fieldPath,
      fieldType: fieldType,
      primary: primary,
      fallback: fallback,
      nullable: nullable,
      children: children,
      description: description,
    );
  }

  factory FieldModel.from(
    BaseModel? other,
  ) {
    try {
      return fromOrNull(other)!;
    } catch (e) {
      assert(false, 'FieldModel.from: $e');
      rethrow;
    }
  }

  @pragma('vm:prefer-inline')
  static FieldModel? fromOrNull(
    BaseModel? other,
  ) {
    return fromJsonOrNull(other?.toJson())!;
  }

  factory FieldModel.of(
    FieldModel other,
  ) {
    try {
      return ofOrNull(other)!;
    } catch (e) {
      assert(false, 'FieldModel.of: $e');
      rethrow;
    }
  }

  @pragma('vm:prefer-inline')
  static FieldModel? ofOrNull(
    FieldModel? other,
  ) {
    return fromJsonOrNull(other?.toJson());
  }

  factory FieldModel.fromJsonString(
    String source,
  ) {
    try {
      return fromJsonStringOrNull(source)!;
    } catch (e) {
      assert(false, 'FieldModel.fromJsonString: $e');
      rethrow;
    }
  }

  static FieldModel? fromJsonStringOrNull(
    String? source,
  ) {
    try {
      if (source!.isNotEmpty) {
        final decoded = letMapOrNull<String, dynamic>(jsonDecode(source));
        return FieldModel.fromJson(decoded);
      } else {
        return const FieldModel.c2();
      }
    } catch (_) {
      return null;
    }
  }

  factory FieldModel.fromJson(
    Map<String, dynamic>? otherData,
  ) {
    try {
      return fromJsonOrNull(otherData)!;
    } catch (e) {
      assert(false, 'FieldModel.fromJson: $e');
      rethrow;
    }
  }

  static FieldModel? fromJsonOrNull(
    Map<String, dynamic>? otherData,
  ) {
    try {
      final fieldPath = letListOrNull<dynamic>(otherData?['fieldPath'])
          ?.map(
            (p0) => p0?.toString().trim().nullIfEmpty,
          )
          .nonNulls
          .nullIfEmpty
          ?.toList();
      final fieldType = otherData?['fieldType'];
      final primary = letAsOrNull<bool>(otherData?['primary']);
      final fallback = otherData?['fallback'];
      final nullable = letAsOrNull<bool>(otherData?['nullable']);
      final children = letListOrNull<dynamic>(otherData?['children'])
          ?.map(
            (p0) => () {
              final a = letMapOrNull<String, dynamic>(p0);
              return a != null ? FieldModel.fromJson(a) : null;
            }(),
          )
          .nonNulls
          .nullIfEmpty
          ?.toList();
      final description =
          otherData?['description']?.toString().trim().nullIfEmpty;
      return FieldModel(
        fieldPath: fieldPath,
        fieldType: fieldType,
        primary: primary,
        fallback: fallback,
        nullable: nullable,
        children: children,
        description: description,
      );
    } catch (e) {
      return null;
    }
  }

  factory FieldModel.fromUri(
    Uri? uri,
  ) {
    try {
      return fromUriOrNull(uri)!;
    } catch (e) {
      assert(false, 'FieldModel.fromUri: $e');
      rethrow;
    }
  }

  static FieldModel? fromUriOrNull(
    Uri? uri,
  ) {
    try {
      if (uri != null && uri.path == CLASS_NAME) {
        return FieldModel.fromJson(uri.queryParameters);
      } else {
        return const FieldModel.c2();
      }
    } catch (_) {
      return null;
    }
  }

  //
  //
  //

  @override
  Map<String, dynamic> toJson({
    bool includeNulls = false,
  }) {
    try {
      final fieldPath0 = fieldPath
          ?.map(
            (p0) => p0?.trim().nullIfEmpty,
          )
          .nonNulls
          .nullIfEmpty
          ?.toList();
      final fieldType0 = fieldType;
      final primary0 = primary;
      final fallback0 = fallback;
      final nullable0 = nullable;
      final children0 = children
          ?.map(
            (p0) => p0?.toJson(),
          )
          .nonNulls
          .nullIfEmpty
          ?.toList();
      final description0 = description?.trim().nullIfEmpty;
      final withNulls = {
        'primary': primary0,
        'nullable': nullable0,
        'fieldType': fieldType0,
        'fieldPath': fieldPath0,
        'fallback': fallback0,
        'description': description0,
        'children': children0,
      };
      return includeNulls ? withNulls : withNulls.nonNulls;
    } catch (e) {
      assert(false, 'FieldModel.toJson: $e');
      rethrow;
    }
  }

  //
  //
  //

  @override
  FieldModel mergeWith(
    BaseModel? other, {
    bool deepMerge = false,
  }) {
    final a = toJson();
    final b = other?.toJson() ?? {};
    final data = (deepMerge ? mergeDataDeep(a, b) : {...a, ...b}) as Map;
    return FieldModel.fromJson(data.cast());
  }

  //
  //
  //

  FieldModel copyWith({
    List<String>? fieldPath,
    dynamic? fieldType,
    bool? primary,
    Object? fallback,
    bool? nullable,
    List<FieldModel>? children,
    String? description,
  }) {
    return FieldModel.c2(
      fieldPath: fieldPath ?? this.fieldPath,
      fieldType: fieldType ?? this.fieldType,
      primary: primary ?? this.primary,
      fallback: fallback ?? this.fallback,
      nullable: nullable ?? this.nullable,
      children: children ?? this.children,
      description: description ?? this.description,
    );
  }

  //
  //
  //

  FieldModel copyWithout({
    bool fieldPath = true,
    bool fieldType = true,
    bool primary = true,
    bool fallback = true,
    bool nullable = true,
    bool children = true,
    bool description = true,
  }) {
    return FieldModel.c2(
      fieldPath: fieldPath ? this.fieldPath : null,
      fieldType: fieldType ? this.fieldType : null,
      primary: primary ? this.primary : null,
      fallback: fallback ? this.fallback : null,
      nullable: nullable ? this.nullable : null,
      children: children ? this.children : null,
      description: description ? this.description : null,
    );
  }

  //
  //
  //

  // fieldPath.
  @pragma('vm:prefer-inline')
  List<String>? get fieldPathField => this.fieldPath;

  // fieldType.
  @pragma('vm:prefer-inline')
  dynamic get fieldTypeField => this.fieldType!;

  // primary.
  @pragma('vm:prefer-inline')
  bool? get primaryField => this.primary;

  // fallback.
  @pragma('vm:prefer-inline')
  Object? get fallbackField => this.fallback;

  // nullable.
  @pragma('vm:prefer-inline')
  bool? get nullableField => this.nullable;

  // children.
  @pragma('vm:prefer-inline')
  List<FieldModel>? get childrenField => this.children;

  // description.
  @pragma('vm:prefer-inline')
  String? get descriptionField => this.description;
}

// ░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░

abstract final class FieldModelFieldNames {
  static const fieldPath = 'fieldPath';
  static const fieldType = 'fieldType';
  static const primary = 'primary';
  static const fallback = 'fallback';
  static const nullable = 'nullable';
  static const children = 'children';
  static const description = 'description';
}
