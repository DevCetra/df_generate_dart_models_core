//.title
// ▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓
//
// GENERATED BY DF GEN - DO NOT MODIFY BY HAND
// See: https://github.com/robmllze/df_gen
//
// ▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓
//.title~

// ignore_for_file: annotate_overrides
// ignore_for_file: invalid_null_aware_operator
// ignore_for_file: overridden_fields
// ignore_for_file: require_trailing_commas
// ignore_for_file: unnecessary_non_null_assertion
// ignore_for_file: unnecessary_null_comparison
// ignore_for_file: unnecessary_question_mark
// ignore_for_file: unnecessary_this

part of 'referenced_model.dart';

// ░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░

class ReferencedModel extends _ReferencedModel {
  //
  //
  //

  static const CLASS_NAME = 'ReferencedModel';

  @override
  String get $className => CLASS_NAME;

  final String? id;
  final DataRefModel? ref;

  //
  //
  //

  const ReferencedModel({
    required this.id,
    required this.ref,
  });

  const ReferencedModel.c2({
    this.id,
    this.ref,
  });

  factory ReferencedModel.c3({
    String? id,
    DataRefModel? ref,
  }) {
    assert(id != null);
    assert(ref != null);
    return ReferencedModel(
      id: id,
      ref: ref,
    );
  }

  factory ReferencedModel.from(
    BaseModel? other,
  ) {
    try {
      return fromOrNull(other)!;
    } catch (e) {
      assert(false, 'ReferencedModel.from: $e');
      rethrow;
    }
  }

  @pragma('vm:prefer-inline')
  static ReferencedModel? fromOrNull(
    BaseModel? other,
  ) {
    return fromJsonOrNull(other?.toJson())!;
  }

  factory ReferencedModel.of(
    ReferencedModel other,
  ) {
    try {
      return ofOrNull(other)!;
    } catch (e) {
      assert(false, 'ReferencedModel.of: $e');
      rethrow;
    }
  }

  @pragma('vm:prefer-inline')
  static ReferencedModel? ofOrNull(
    ReferencedModel? other,
  ) {
    return fromJsonOrNull(other?.toJson());
  }

  factory ReferencedModel.fromJsonString(
    String source,
  ) {
    try {
      return fromJsonStringOrNull(source)!;
    } catch (e) {
      assert(false, 'ReferencedModel.fromJsonString: $e');
      rethrow;
    }
  }

  static ReferencedModel? fromJsonStringOrNull(
    String? source,
  ) {
    try {
      if (source!.isNotEmpty) {
        final decoded = letMapOrNull<String, dynamic>(jsonDecode(source));
        return ReferencedModel.fromJson(decoded);
      } else {
        return const ReferencedModel.c2();
      }
    } catch (_) {
      return null;
    }
  }

  factory ReferencedModel.fromJson(
    Map<String, dynamic>? otherData,
  ) {
    try {
      return fromJsonOrNull(otherData)!;
    } catch (e) {
      assert(false, 'ReferencedModel.fromJson: $e');
      rethrow;
    }
  }

  static ReferencedModel? fromJsonOrNull(
    Map<String, dynamic>? otherData,
  ) {
    try {
      final id = otherData?['id']?.toString().trim().nullIfEmpty;
      final ref = () {
        final a = letMapOrNull<String, dynamic>(otherData?['ref']);
        return a != null ? DataRefModel.fromJson(a) : null;
      }();
      return ReferencedModel(
        id: id,
        ref: ref,
      );
    } catch (e) {
      return null;
    }
  }

  factory ReferencedModel.fromUri(
    Uri? uri,
  ) {
    try {
      return fromUriOrNull(uri)!;
    } catch (e) {
      assert(false, 'ReferencedModel.fromUri: $e');
      rethrow;
    }
  }

  static ReferencedModel? fromUriOrNull(
    Uri? uri,
  ) {
    try {
      if (uri != null && uri.path == CLASS_NAME) {
        return ReferencedModel.fromJson(uri.queryParameters);
      } else {
        return const ReferencedModel.c2();
      }
    } catch (_) {
      return null;
    }
  }

  //
  //
  //

  @override
  Map<String, dynamic> toJson({
    bool includeNulls = false,
  }) {
    try {
      final id0 = id?.trim().nullIfEmpty;
      final ref0 = ref?.toJson();
      final withNulls = {
        'ref': ref0,
        'id': id0,
      };
      return includeNulls ? withNulls : withNulls.nonNulls;
    } catch (e) {
      assert(false, 'ReferencedModel.toJson: $e');
      rethrow;
    }
  }

  //
  //
  //

  @override
  ReferencedModel mergeWith(
    BaseModel? other, {
    bool deepMerge = false,
  }) {
    final a = toJson();
    final b = other?.toJson() ?? {};
    final data = (deepMerge ? mergeDataDeep(a, b) : {...a, ...b}) as Map;
    return ReferencedModel.fromJson(data.cast());
  }

  //
  //
  //

  ReferencedModel copyWith({
    String? id,
    DataRefModel? ref,
  }) {
    return ReferencedModel.c2(
      id: id ?? this.id,
      ref: ref ?? this.ref,
    );
  }

  //
  //
  //

  ReferencedModel copyWithout({
    bool id = true,
    bool ref = true,
  }) {
    return ReferencedModel.c2(
      id: id ? this.id : null,
      ref: ref ? this.ref : null,
    );
  }

  //
  //
  //

  // id.
  @pragma('vm:prefer-inline')
  String get idField => this.id!;

  // ref.
  @pragma('vm:prefer-inline')
  DataRefModel get refField => this.ref!;
}

// ░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░

abstract final class ReferencedModelFieldNames {
  static const id = 'id';
  static const ref = 'ref';
}
